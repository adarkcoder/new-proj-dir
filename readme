first to get the infra:
go the terraform folder and cd  .ssh and do ssh-key to create key value pair

ssh-keygen -t rsa -b 4096 -C "manoj@example.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/MANOJ/.ssh/id_rsa): ./id_rsa
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in ./id_rsa
Your public key has been saved in ./id_rsa.pub


then go to code folder inside the terraform folder.

then do terraform init
terraform apply -auto-approve
it will ask password, give: NewPassManu
or you can provide your own password then make sure to update kubernetes secret according to it in the backend folder inside kuberentes folder

after that do terraform output and get the bastion_public_ip
 then do ssh -i path_to_private_key ubuntu@ipaddress_got form previous step

then do aws configure and set the access key id and secret access key
connecting to the cluster
aws eks update-kubeconfig --region region-code --name my-cluster


installing metrics server
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


installing nginx-ingress
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml

git clone the repository

go to prometheus folder inside kuberentes

kubectl apply -f crds.yaml
kubectl apply -f eks-monitoring.yaml
kubectl apply -f grafana-ingress.yaml

from the kubernetes foder execute the following command to deploy frontend and backend pods:
kubectl apply -f Backend/ -f Frontend/

go see the hpa working:
1, kubectl get all to see all pods
2, execute stress in any of the pods:
kubectl exec -it pod-name -- stress -c 3 

now do,
kubectl get pods or kubectl get all

we can see the pod scaling 

now go the browser and type frontend.exampl.com to get the webapp

now to see the grafana go to grafana.example.com explore the metrics


# Project Setup Guide

## Infrastructure Setup with Terraform

### 1. Generate SSH Key Pair
Navigate to the SSH directory and create an SSH key pair:
```sh
cd terraform/.ssh
ssh-keygen -t rsa -b 4096 -C "manoj@example.com"

2. Update Public Key Path
Move to the Terraform code directory and update the public_key_path variable in the variables.tf file:
 
cd terraform/code
nano variables.tf
# Update the `public_key_path` variable with the path to your public key

3. Initialize and Apply Terraform
Initialize and apply the Terraform configuration:

terraform init
terraform apply -auto-approve
# When prompted for a password, use: NewPassManu
# Alternatively, you can provide your own password and update the Kubernetes secret accordingly in the backend folder inside the Kubernetes folder.

4. Retrieve Bastion Host IP
Get the bastion host public IP address:

terraform output
# Note the `bastion_public_ip`
# Also update the config map with rds_cluster_endpoint

5. SSH into Bastion Host 
SSH into the bastion host using the private key:

ssh -i path_to_private_key ubuntu@bastion_public_ip


6. Configure AWS CLI
Configure the AWS CLI with your access key and secret access key:

aws configure
# Follow the prompts to set the access key ID, secret access key, region, and output format.

7. Connect to EKS Cluster
Update your kubeconfig to connect to the EKS cluster:

aws eks update-kubeconfig --region region-code --name my-eks-cluster

Kubernetes Setup
1. Install Metrics Server
Install the Kubernetes Metrics Server:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


2. Install Nginx Ingress Controller
Install the Nginx Ingress Controller:

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml

3. Clone the Repository
Clone the project repository:

git clone https://github.com/adarkcoder/new-proj-dir.git


Monitoring Setup
1. Deploy Prometheus and Grafana
Navigate to the Prometheus directory inside the Kubernetes folder and apply the configurations:

cd kubernetes/prometheus
kubectl apply -f crds.yaml
kubectl apply -f eks-monitoring.yaml
kubectl apply -f grafana-ingress.yaml


Application Deployment
1. Deploy Backend and Frontend Pods
From the Kubernetes folder, deploy the backend and frontend pods:

cd ..
kubectl apply -f Backend/ -f Frontend/

Horizontal Pod Autoscaler (HPA)
1. Verify Deployment
Check all pods to ensure they are running:

kubectl get all


2. Test HPA by Stressing a Pod
Execute a stress test in any backend pod:

kubectl exec -it <backend-pod-name> -- stress -c 3

3. Observe Scaling
Observe the pod scaling:

kubectl get pods
# or
kubectl get all

Due to fact i don't have any domain, i used /etc/hosts:

kubectl get service -n ingress-nginx

grab the external ip of ingress-nginx-controller
then to get ips of the loadbalancer do:

nslookup  abff3d0ab5b834442b0d1662afcfcea0-5215a7d77e1b7707.elb.us-east-1.amazonaws.com
#replace with dns name you got from previous step.

you will get three ips, for each ip do:

For Windows localmachine:
Open your text editor in Administrator mode.
In the text editor, open C:\Windows\System32\drivers\etc\hosts.
Add the IP Address and hostname.
Example:
171.10.10.5 backend.example.com
171.10.10.5 frontend.example.com
171.10.10.5 grafana.example.com


Save the changes.

Accessing Services
1. Access the Frontend
Open your local browser and go to:

http://frontend.example.com

2. Access Grafana
Open your browser and go to:

http://grafana.example.com

Explore the metrics and dashboards.


